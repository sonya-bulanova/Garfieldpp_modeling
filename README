README for Garfield++

1. signal.C 

1.0: Единицы измерения в Garfield++:
расстояние [cm]
масса [g]
энергия [eV]
время [ns]
напряженность электрического поля [V/cm]
Магнитное поле [Tesla]
Электрический заряд [fC]
Давление [Torr]

1.1: Добавляем сдвиг проволоки параллельно оси цилиндра.
  ComponentAnalyticField cmp;
  cmp.AddWire(0.05, 0, 2 * rWire, vWire, "s"); //0.05 cm

1.2: Интегрирование методом Рунге-Кутты
  DriftLineRKF drift;
  drift.SetGainFluctuationsPolya(1, 57000, false); 
Gas Gain составляет 45000. Функции, выставляющей Gas gain, передаем завышенное значение (см. Проблема Gas Gain)

1.3: Генерируем равномерное заполнение трубки. Необходимо записать случайные значения расстояния для каждого трека
double rTrack = gRandom->Uniform(-0.499, 0.499); //cm

1.4: Контролируем Gas gain. По распределениям необходимо убедиться, что он не зависит от наличия магнитного поля и 

2. get_shaper_signal_params_RT.cpp

Скрипт для скана по порогам (величины порогов выбраны {0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009, 0.01, 0.015} [V])
Включает в себя построение распределений времен прихода сигналов и их фитирование (thrCross); интеграл заряда (ampSpectra),
а также построение двумерной RT-кривой (RT_curve)

RT-кривая строится как двумерная гистограмма от расстояния между центром трубки и от времени прихода сигнала.

2.1 get_shaper_signal_params.cpp
Скрипт без скана по порогам, без построения RT-кривой

2.2 get_amp_signal.cpp

Скрипт для построения только интеграла заряда и фитирования функцией Ландау

3. compare_gauss_fits.cpp 

Скрипт для построения фитированных распределений времен прихода сигнала (два на одном графике)

4. compare_fit.cpp 

Скрипт для построения сравнения точек из фитов. Точки получены из функций фитирования:

  graph_mpv_field -> Fit("pol6", "", "", 0.0, 5.0);
  TF1 *f1 = (TF1 *)gROOT->GetFunction("pol6");
  std::cout << "In point x = " << 0. << " function: " << f1 -> Eval(0.) << std::endl;
  for (int i = 0; i < 9; i++){
    std::cout << "In point x = " << distance[i] << " function: " << f1 -> Eval(distance[i]) << std::endl;
  }
  std::cout << "In point x = " << 5.0 << " function: " << f1 -> Eval(5.0) << std::endl;

5. draw_distr.cpp
 Скрипт для построения и фитирования распределений MPV и Sigma. 
